链接 openjudge：http://noi.openjudge.cn/ch0107/11/
链接 洛谷1071：https://www.luogu.org/problemnew/show/P1071
按照惯例，先来分析一下题目。
这道题先给你两个字符串，分别为待破译和已破译的加密信息，我们先把破译的字母对应表搞出来，然后再去破译下一个信息就行了。当然还有一些特殊情况。
这是破译的完成条件：
1、所有信息扫描完毕，‘A’—‘Z’所有26个字母在原信息中均出现过并获得了相应的“密字”。
下面是两种种退出的条件：
1、所有信息扫描完毕，但发现存在某个（或某些）字母在原信息中没有出现。
2、扫描中发现掌握的信息里有明显的自相矛盾或错误（违反S过密码的编码规则）。例如某条信息“XYZ”被翻译为“ABA”就违反了“不同字母对应不同密字”的规则。
条件1还是很好判断的，加一个bool变量即可，我们主要来看看条件2
每个字母只对应一个唯一的“密字”，不同的字母对应不同的“密字”。“密字”可以和原字母相同。一看这就是重点，判断情况我们可以去看一看样例2。
分析的差不多了，那我们就来开始做题。
这道题主要还是字符串，只是涉及的东西可能有点多，代码有点难写。
这么简单我就直接编代码了：
#include<iostream>
#include<cstdio>
#include<cmath>
#include<cstring>
#include<string>
using namespace std；
int main()
{
	int i,j,k,a[100]={0},b,c=0,d=0,l,l1;
	char s[101]={' '},sx[101]={' '};
	bool bl[101]={0};
	string s1,s2,s3;
    cin>>s1;
    cin>>s2;
    cin>>s3;
	l=s1.length();
	l1=s3.length();
	for(i=0;i<=l-1;i++)
	{
		c=int(s1[i]);
		if((bl[c]==1)&&(s2[i]!=s[c]))
		{
			printf("Failed");
			return 0;
		}
		s[c]=s2[i];
		bl[c]=1;
	}
	for(i=65;i<=90;i++)
	{
		if(bl[i]==0)
		{
			printf("Failed");
			return 0;
		}
	}
	for(int i=65;i<=90;++i)
	  for(int j=65;j<=90;++j)
	    if(s1[i]==s2[j]&&i!=j)
		{
	        cout<<"Failed";
			return 0;
		}

	for(i=0;i<=l1-1;i++)
	{
		c=int(s3[i]);
		cout<<s[c];
	}
}
这么简单的一道题我当然…… 

 what？ WA九分？这是什么情况？！
等等，先别急着笑，不许笑！

咳咳，原来是判断是否跳出时出现了问题，因为样例不完整只考虑到了三种情况中的两种，导致程序失误。WA9分。
这道题目解答时应注意条理，共有三种情况会输出“Failed”，应将所有情况列出后进行解题；
总结一下三种跳出的情况：
1.一个加密信息（字母）对应多个原信息（字母）。(AA AB)
2.多个加密信息（字母）对应一个原信息（字母）。(AB AA)
3.(破译表）未填充完整。（见例2）
不能只看样例，应注意审题！！！！ （惨痛的教训）
那么我的正确题解来了：
#include<iostream>
#include<cstdio>
#include<cmath>
#include<cstring>
#include<string>
using namespace std;

int main()
{
      int i,j,k,a[100]={0},b,c=0,d=0,l,l1;
      char s[101]={' '}; //用到的只有s[65]-s[90],用于保存A-Z每个对应的破译字母。 （破译表） 
      bool bl[101]={0}; // 用于查看是否已读入破译字母。 
      string s1,s2,s3; 
      cin>>s1; //读入三个字符串，即加密信息、原信息、新加密信息。
      cin>>s2;
      cin>>s3;
      l=s1.length(); //求出加密信息和原信息的长度（相等）。 
      l1=s3.length(); // 求出新加密信息的长度。 
      for(i=0;i<=l-1;i++) //查看是否有一个加密信息（字母）对应多个原信息（字母）的情况，如例1 AA AB 这里A同时对应了 A、B。 
      {
            c=int(s1[i]); 
            if((bl[c]==1)&&(s2[i]!=s[c])) //如果这个字母（加密信息中的）已被读入且新读入的与原有的不符。 
            {
                  printf("Failed"); //不符：输出。。。退出程序。 
                  return 0;
            }
            s[c]=s2[i]; // 将对应的破译字母储存到s数组中。 
            bl[c]=1; //将这个字母（加密信息中的）标为“已读入破译字母”。 
      }

      for(int i=65;i<=90;++i) //查看是否有多个加密信息（字母）对应一个原信息（字母）的情况。 
            for(int j=65;j<=90;++j) //特别注意！！！！ 这种情况在样例中没有！举例： ABCD ACBA 这里加密信息中“A、D”对应的原信息都是"A" 。 
                  if(s[i]==s[j]&&i!=j) //如果s数组（破译表）中 有重复的字母，退出程序。 
                  { //这点我开始也错了，后经过Wiggins的提示才明白。 
                        cout<<"Failed"; 
                        return 0;
                  }

      for(i=65;i<=90;i++) //查看（破译表）是否填充完整 如例2， 例2中原信息没有“Z”。 
      {
            if(bl[i]==0)
            {
                  printf("Failed");
                  return 0;
            }
      }

      for(i=0;i<=l1-1;i++) //输出结果。 
      {
            c=int(s3[i]);
            cout<<s[c];
      }
      return 0；//功德圆满
}
